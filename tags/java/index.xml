<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on HiwiK</title><link>/tags/java/</link><description>Recent content in Java on HiwiK</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Hong Sikun</copyright><lastBuildDate>Thu, 07 Mar 2024 00:07:56 +0800</lastBuildDate><atom:link href="/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>《Java8实战》笔记</title><link>/hiwikhome/note/java8/</link><pubDate>Thu, 07 Mar 2024 00:07:56 +0800</pubDate><guid>/hiwikhome/note/java8/</guid><description>&lt;img src="/hiwikhome/note/java8/post.png" alt="Featured image of post 《Java8实战》笔记" />&lt;h1 id="1-函数式数据处理">1. 函数式数据处理&lt;/h1>
&lt;h2 id="行为参数化">行为参数化&lt;/h2>
&lt;p>行为参数化是一种编程范式，它允许方法的行为通过参数的形式传递和修改。这种技术在处理变化的需求时非常有用，因为它使得代码更加灵活，能够适应不同的行为而无需修改方法本身。行为参数化是函数式编程思想在面向对象编程语言中的一种体现，特别是在Java 8中，通过使用Lambda表达式和方法引用，行为参数化变得更加简单和直观。&lt;/p>
&lt;h2 id="lambda">Lambda&lt;/h2>
&lt;p>&lt;code>parameters -&amp;gt; expression&lt;/code> 或 &lt;code>(parameters)-&amp;gt;{statement;}&lt;/code>&lt;/p>
&lt;ul>
&lt;li>当 Lambda 表达式被用在一个期望 &lt;code>void&lt;/code> 返回类型的上下文时,表达式的返回值会被忽略,而表达式本身会被当做一个语句来执行.&lt;/li>
&lt;li>如果 Lambda 允许捕获可改变的局部变量,就会引发线程不安全的新可能性.&lt;/li>
&lt;/ul>
&lt;h2 id="函数式接口">函数式接口&lt;/h2>
&lt;p>&lt;strong>定义&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>只定义一个抽象方法的接口&lt;/li>
&lt;li>使用 &lt;code>@FunctionalInterface&lt;/code> 注解函数式接口&lt;/li>
&lt;li>只有在接受函数式接口的地方才可以使用 lambda 表达式&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>例子&lt;/strong>&lt;/p>
&lt;h3 id="predicate">Predicate&lt;/h3>
&lt;ul>
&lt;li>Predicate 通常用于&lt;strong>过滤数据&lt;/strong>或&lt;strong>匹配数据&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@FunctionalInterface&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">interface&lt;/span> &lt;span class="nc">Predicate&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">boolean&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="consumer">Consumer&lt;/h3>
&lt;ul>
&lt;li>适用于需要访问对象的操作中，比如从集合中的每个元素中提取信息或者对每个元素&lt;strong>应用某个操作&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@FunctionalInterface&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">interface&lt;/span> &lt;span class="nc">consumer&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">accept&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="function">Function&lt;/h3>
&lt;ul>
&lt;li>&lt;code>Function&lt;/code> 接口非常适用于转换数据、&lt;strong>从一种类型映射到另一种类型&lt;/strong>的场景。&lt;/li>
&lt;li>这里，&lt;code>@FunctionalInterface&lt;/code> 注解表明这是一个函数式接口，而接口中的 &lt;code>apply&lt;/code> 方法是要实现的抽象方法。&lt;code>apply&lt;/code> 方法接受一个类型为 &lt;code>T&lt;/code> 的参数，并返回一个类型为 &lt;code>R&lt;/code> 的结果。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@FunctionalInterface&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">interface&lt;/span> &lt;span class="nc">Function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>Function&lt;/code>接口中的&lt;code>compose&lt;/code>、&lt;code>andThen&lt;/code>和&lt;code>identity&lt;/code>方法使得函数式编程在Java中更加强大和灵活。&lt;/p>
&lt;p>&lt;strong>andThen&lt;/strong>&lt;/p>
&lt;p>&lt;code>andThen&lt;/code>方法用于将两个&lt;code>Function&lt;/code>实例串联起来，其中第一个函数的输出作为第二个函数的输入。其签名如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="k">default&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">andThen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">super&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">extends&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">after&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>示例&lt;/p>
&lt;p>假设我们有两个函数，一个将字符串转换为大写，另一个计算字符串的长度：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">toUpperCase&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">toUpperCase&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stringLength&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">upperCaseLength&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">toUpperCase&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">andThen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stringLength&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">upperCaseLength&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hello world&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 结果是11&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>compose&lt;/strong>&lt;/p>
&lt;p>&lt;code>compose&lt;/code>方法与&lt;code>andThen&lt;/code>相反，它用于先执行作为参数传入的函数，然后执行调用&lt;code>compose&lt;/code>的函数。其签名如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="k">default&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">compose&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">super&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">extends&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">before&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>示例&lt;/p>
&lt;p>使用上面相同的函数，但这次我们改用&lt;code>compose&lt;/code>来实现：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">upperCaseLengthCompose&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stringLength&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">compose&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">toUpperCase&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">lengthCompose&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">upperCaseLengthCompose&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hello world&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 结果仍然是11&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>identity&lt;/strong>&lt;/p>
&lt;p>&lt;code>identity&lt;/code>方法返回一个不进行任何操作的&lt;code>Function&lt;/code>，即直接返回输入参数。这在需要传递一个原样输出的函数时非常有用。其签名如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">identity&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>示例&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">identityFunction&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Function&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">identity&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">identityFunction&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hello world&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 结果是&amp;#34;hello world&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="方法引用">方法引用&lt;/h2>
&lt;p>方法引用的三种类型&lt;/p>
&lt;ul>
&lt;li>指向静态方法的方法引用&lt;/li>
&lt;li>指向任意类型实例方法的方法引用&lt;/li>
&lt;li>指向现有对象的实例方法的方法引用&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>指向静态方法的方法引用&lt;/strong>&lt;/p>
&lt;p>假设我们有一个静态方法&lt;code>static int findLength(String s)&lt;/code>，它返回一个字符串的长度：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">Utils&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">findLength&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用&lt;code>Function&amp;lt;T,R&amp;gt;&lt;/code>和方法引用：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">lengthFunction&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Utils&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">findLength&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>指向任意类型实例方法的方法引用&lt;/strong>&lt;/p>
&lt;p>如果我们想引用&lt;code>String&lt;/code>类的&lt;code>length()&lt;/code>实例方法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">lengthFunction&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里不需要具体的实例，我们直接通过类名引用实例方法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>指向现有对象的实例方法的方法引用&lt;/strong>&lt;/p>
&lt;p>如果我们有一个现有的对象，比如&lt;code>List&amp;lt;String&amp;gt;&lt;/code>，并想引用它的&lt;code>size&lt;/code>方法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Arrays&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">asList&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;apple&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;banana&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;cherry&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Supplier&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sizeSupplier&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里&lt;code>Supplier&amp;lt;T&amp;gt;&lt;/code>是另一个函数式接口，它不接受参数但是返回一个结果。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="stream">Stream&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>流只能消费一次&lt;/p>
&lt;/li>
&lt;li>
&lt;p>流是内部迭代&lt;/p>
&lt;/li>
&lt;li>
&lt;p>流的使用包括三件事&lt;/p>
&lt;ul>
&lt;li>一个数据源（如集合）来执行一个查询。&lt;/li>
&lt;li>一个中间操作链，形成一条流的流水线。&lt;/li>
&lt;li>一个终端操作，执行流水线，并生成结果&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>你可以利用 &lt;code>reduce&lt;/code> 方法将流中所有的元素&lt;strong>迭代合并&lt;/strong>成一个结果，例如求和或查找最大
元素。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>filter和map等操作是无状态的，它们并不存储任何状态。reduce等操作要存储状态才
能计算出一个值。sorted和distinct等操作也要存储状态，因为它们需要把流中的所
有元素缓存起来才能返回一个新的流。这种操作称为有状态操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>流有三种基本的原始类型特化：&lt;code>IntStream&lt;/code>、&lt;code>DoubleStream&lt;/code> 和 &lt;code>LongStream&lt;/code>。它们的操
作也有相应的特化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>流不仅可以从集合创建，也可从值、数组、文件以及iterate与generate等特定方法
创建。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>无限流是没有固定大小的流。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="java-streams-api常用操作">Java Streams API常用操作&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类别&lt;/th>
&lt;th>操作&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>筛选和切片&lt;/td>
&lt;td>&lt;code>filter&lt;/code>&lt;/td>
&lt;td>对流中的元素进行筛选，只保留满足谓词的元素。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;code>distinct&lt;/code>&lt;/td>
&lt;td>通过流所生成元素的 hashCode() 和 equals() 去除重复元素。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;code>skip&lt;/code>&lt;/td>
&lt;td>跳过流中的前N个元素。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;code>limit&lt;/code>&lt;/td>
&lt;td>截断流，使其元素不超过给定数量。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>转换&lt;/td>
&lt;td>&lt;code>map&lt;/code>&lt;/td>
&lt;td>对流中的每个元素应用函数，将其转换成其他形式或提取信息。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;code>flatMap&lt;/code>&lt;/td>
&lt;td>将流中的每个值都换成另一个流，然后把所有流连接起来成为一个流。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>查找和匹配&lt;/td>
&lt;td>&lt;code>findFirst&lt;/code>&lt;/td>
&lt;td>返回流中的第一个元素，如果流为空，返回空的Optional。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;code>findAny&lt;/code>&lt;/td>
&lt;td>返回流中的任意元素，如果流为空，返回空的Optional。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;code>allMatch&lt;/code>&lt;/td>
&lt;td>检查流中的元素是否都满足给定的谓词。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;code>noneMatch&lt;/code>&lt;/td>
&lt;td>检查流中的元素是否都不满足给定的谓词。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;code>anyMatch&lt;/code>&lt;/td>
&lt;td>检查流中是否至少有一个元素满足给定的谓词。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>归约&lt;/td>
&lt;td>&lt;code>reduce&lt;/code>&lt;/td>
&lt;td>将流中元素反复结合起来，得到一个值。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>有状态操作&lt;/td>
&lt;td>&lt;code>sorted&lt;/code>&lt;/td>
&lt;td>流中元素按自然顺序排序或按给定的比较器排序。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;code>distinct&lt;/code>&lt;/td>
&lt;td>通过流所生成元素的 hashCode() 和 equals() 去除重复元素。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>原始类型流&lt;/td>
&lt;td>&lt;code>IntStream&lt;/code>, &lt;code>DoubleStream&lt;/code>, &lt;code>LongStream&lt;/code>&lt;/td>
&lt;td>基本类型的流，提供了额外的数值计算相关的方法。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>流的创建&lt;/td>
&lt;td>从集合、值、数组、文件创建&lt;/td>
&lt;td>流可以通过集合的 stream() 方法，Arrays.stream，以及 Files.lines 等方法创建。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;code>iterate&lt;/code> 和 &lt;code>generate&lt;/code>&lt;/td>
&lt;td>用于创建无限流。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="summarizinglongsummarizingdouble">summarizingLong、summarizingDouble&lt;/h3>
&lt;p>&lt;code>summarizingLong&lt;/code>和&lt;code>summarizingDouble&lt;/code>是两个非常有用的收集器（Collectors），它们能够对流中元素的某个长整型或双精度属性进行汇总统计。这些收集器生成的是&lt;code>LongSummaryStatistics&lt;/code>或&lt;code>DoubleSummaryStatistics&lt;/code>实例，分别用于长整型和双精度值的统计信息，包括元素数量、总和、最小值、最大值以及平均值。&lt;/p>
&lt;h3 id="joining">joining&lt;/h3>
&lt;p>&lt;code>joining&lt;/code>是Java中&lt;code>java.util.stream.Collectors&lt;/code>类提供的一种工厂方法，用于将流中的元素在遍历过程中合并成一个字符串。这个方法非常适合在处理字符串集合或者需要将对象转换为字符串并连接起来的情况。&lt;code>joining&lt;/code>方法有几个重载版本，可以根据需要选择使用。&lt;/p>
&lt;p>&lt;strong>1.无参版本&lt;/strong>&lt;/p>
&lt;p>当不需要在连接的字符串之间添加分隔符、前缀或后缀时，可以使用最简单的形式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Collector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">CharSequence&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">joining&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CharSequence&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">delimiter&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这将简单地将输入元素连接成一个字符串。&lt;/p>
&lt;p>&lt;strong>示例&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Arrays&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">asList&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Java&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;Python&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;JavaScript&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">stream&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="na">collect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Collectors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">joining&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 结果: &amp;#34;JavaPythonJavaScript&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>2.带有分隔符的版本&lt;/strong>&lt;/p>
&lt;p>如果想要在每个元素之间添加一个分隔符，可以使用带有一个字符串参数的&lt;code>joining&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Collector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">CharSequence&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">joining&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CharSequence&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">delimiter&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>示例&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">codeList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Arrays&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">asList&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Java&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;Python&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;JavaScript&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">stream&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="na">collect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Collectors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">joining&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;, &amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 结果: &amp;#34;Java, Python, JavaScript&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>3.带有分隔符、前缀和后缀的版本&lt;/strong>&lt;/p>
&lt;p>最完整的&lt;code>joining&lt;/code>版本允许在结果字符串的开始和结束添加前缀和后缀，同时在元素之间添加分隔符：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Collector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">CharSequence&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">joining&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CharSequence&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">delimiter&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">CharSequence&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">prefix&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">CharSequence&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">suffix&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>示例：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">javaCopy codeList&amp;lt;String&amp;gt; list = Arrays.asList(&amp;#34;Java&amp;#34;, &amp;#34;Python&amp;#34;, &amp;#34;JavaScript&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">String result = list.stream().collect(Collectors.joining(&amp;#34;, &amp;#34;, &amp;#34;[&amp;#34;, &amp;#34;]&amp;#34;));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 结果: &amp;#34;[Java, Python, JavaScript]&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="广义的归约汇总">广义的归约汇总&lt;/h3>
&lt;p>&lt;code>Collectors.reducing&lt;/code> 工厂方法是所有这些特殊情况的一般化&lt;/p>
&lt;ul>
&lt;li>
&lt;p>第一个参数是归约操作的&lt;strong>起始值&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>第二个参数就是&lt;strong>转换函数&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>第三个参数是&lt;strong>累积函数&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">totalCalories&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">menu&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">stream&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="na">collect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">reducing&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Dish&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">getCalories&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="/hiwikhome/note/java8/image1.png"
width="1188"
height="439"
srcset="/hiwikhome/note/java8/image1_huaca5ecaeefefbf61af28df157553ff1c_68933_480x0_resize_box_3.png 480w, /hiwikhome/note/java8/image1_huaca5ecaeefefbf61af28df157553ff1c_68933_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240303223940506"
class="gallery-image"
data-flex-grow="270"
data-flex-basis="649px"
>&lt;/p>
&lt;h3 id="groupingby">groupingBy&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Collector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">groupingBy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">super&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">extends&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">classifier&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Collector&lt;/span>&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">super&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">downstream&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>工作原理&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>分类&lt;/strong>：对流中的每个元素使用分类函数&lt;code>classifier&lt;/code>，根据其返回值进行分组。这个返回值决定了元素属于哪个分组键&lt;code>K&lt;/code>。&lt;/li>
&lt;li>&lt;strong>收集&lt;/strong>：对于每个分组，使用提供的下游收集器&lt;code>downstream&lt;/code>对该分组中的元素进行进一步处理，生成结果类型&lt;code>D&lt;/code>。&lt;/li>
&lt;li>&lt;strong>结果映射&lt;/strong>：最终，方法生成一个映射&lt;code>Map&amp;lt;K, D&amp;gt;&lt;/code>，其中每个键&lt;code>K&lt;/code>（分组标准）都映射到一个&lt;code>D&lt;/code>类型的值（下游收集器的结果）。&lt;/li>
&lt;/ol>
&lt;h3 id="functionidentity">Function.identity()&lt;/h3>
&lt;p>通过返回一个简单的恒等函数，它允许保持元素不变或作为原始形式传递，同时满足函数式接口的需求。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">identity&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="parallel并行流">parallel(并行流)&lt;/h2>
&lt;p>&lt;code> parallel&lt;/code> 流转换成并行流&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-JAVA" data-lang="JAVA">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">long&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">parallelSum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">long&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">iterate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">1L&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 从1开始生成一个无限流，每次递增1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">limit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 限制流的大小为n&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">parallel&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 将流转换为并行流&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">reduce&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">0L&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Long&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 使用reduce操作进行求和&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>流的数据源和可分解性&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>可分解性&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ArrayList&lt;/td>
&lt;td>较佳&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>LinkedList&lt;/td>
&lt;td>差&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IntStream.range&lt;/td>
&lt;td>较佳&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Stream.iterate&lt;/td>
&lt;td>差&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>HashSet&lt;/td>
&lt;td>好&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TreeSet&lt;/td>
&lt;td>好&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>高效使用并行流&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>通过测量耗时判断是否使用&lt;/p>
&lt;/li>
&lt;li>
&lt;p>留意装箱,自动装箱和拆箱操作会大大降低性能&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>limit&lt;/code> 和 &lt;code>findFirst&lt;/code> 等依赖于元素顺序的操作，它们在并行流上执行的代价非常大&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于较小的数据量，选择并行流几乎从来都不是一个好的决定&lt;/p>
&lt;/li>
&lt;li>
&lt;p>考虑终端操作中合并步骤的代价是大是小,如果这一步代价很大，那么组合每个子流产生的部分结果所付出的代价就可能会超出通过并行流得到的性能提升&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="分支合框架">分支/合框架&lt;/h2>
&lt;blockquote>
&lt;p>Java 8 引入了分支/合并框架（Fork/Join Framework），这是一个用于并行执行任务的框架，旨在充分利用多核处理器的计算能力。它是一种实现了工作窃取算法（work-stealing algorithm）的框架，允许多个处理器核心更高效地处理大量任务，尤其是那些可以递归分解为更小任务的工作。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>核心概念&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Fork&lt;/strong>：将一个大任务分解成若干个小任务，这些小任务可以并行执行。&amp;ldquo;Fork&amp;quot;是这个过程的术语，意味着&amp;quot;分支&amp;quot;出新的子任务。&lt;/li>
&lt;li>&lt;strong>Join&lt;/strong>：等待分支出去的任务完成，并将结果合并起来。&amp;ldquo;Join&amp;quot;指的是将这些并行执行的任务的结果合并到一起，完成整个任务。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>关键组件&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>ForkJoinPool&lt;/strong>：这是执行ForkJoinTask任务的线程池。它使用工作窃取算法来优化任务的执行，使得所有线程都尽可能保持忙碌状态。&lt;/li>
&lt;li>&lt;strong>ForkJoinTask&lt;/strong>:这是要执行的任务的基类。有两个重要的子类：
&lt;ul>
&lt;li>&lt;strong>RecursiveAction&lt;/strong>：用于没有返回结果的任务。&lt;/li>
&lt;li>&lt;strong>RecursiveTask&lt;V>&lt;/strong>：用于有返回结果的任务。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>工作窃取算法&lt;/strong>&lt;/p>
&lt;p>工作窃取算法是分支/合并框架的核心。每个处理器都有自己的任务队列。当一个处理器完成了自己队列中的所有任务后，它可以随机选择一个其他处理器，&amp;ldquo;窃取&amp;quot;一部分任务来执行。这种方法提高了线程之间的工作负载均衡，减少了闲置时间&lt;/p>
&lt;h2 id="spliterator">Spliterator&lt;/h2>
&lt;blockquote>
&lt;p>&lt;code>Spliterator&lt;/code>是Java 8中引入的一个接口，设计用来进一步提高并行处理能力。它在&lt;code>java.util&lt;/code>包中，主要用于遍历和分割数据源，以便于进行并行计算。与&lt;code>Iterator&lt;/code>相比，&lt;code>Spliterator&lt;/code>提供了更多的功能，特别是对于并行迭代操作而言。&lt;/p>
&lt;/blockquote>
&lt;p>关键方法&lt;/p>
&lt;p>&lt;code>Spliterator&lt;/code>接口定义了几个关键方法：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>tryAdvance(Consumer&amp;lt;? super T&amp;gt; action)&lt;/strong>：如果剩余元素存在，则对下一个元素执行给定的操作，并返回&lt;code>true&lt;/code>；否则返回&lt;code>false&lt;/code>。这类似于&lt;code>Iterator&lt;/code>的&lt;code>hasNext&lt;/code>和&lt;code>next&lt;/code>方法的结合体。&lt;/li>
&lt;li>&lt;strong>forEachRemaining(Consumer&amp;lt;? super T&amp;gt; action)&lt;/strong>：对剩余每个元素执行给定的操作，直到所有元素都被处理或操作抛出异常。&lt;/li>
&lt;li>&lt;strong>trySplit()&lt;/strong>：尝试分割此&lt;code>Spliterator&lt;/code>，以便部分元素由当前&lt;code>Spliterator&lt;/code>处理，而另一部分元素由新的&lt;code>Spliterator&lt;/code>处理。这是并行处理的关键。&lt;/li>
&lt;li>&lt;strong>estimateSize()&lt;/strong>：返回此&lt;code>Spliterator&lt;/code>中剩余元素的估计数量。&lt;/li>
&lt;li>&lt;strong>characteristics()&lt;/strong>：返回此&lt;code>Spliterator&lt;/code>的特征值，这是一个位模式，表示该&lt;code>Spliterator&lt;/code>的属性集。&lt;/li>
&lt;/ul>
&lt;h1 id="2高效-java8-编程">2.高效 Java8 编程&lt;/h1>
&lt;h2 id="lambda-表达式优化代码">&lt;strong>Lambda 表达式优化代码&lt;/strong>&lt;/h2>
&lt;h3 id="用lambda表达式取代匿名类">用Lambda表达式取代匿名类&lt;/h3>
&lt;p>&lt;strong>原代码使用匿名类&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-JAVA" data-lang="JAVA">&lt;span class="line">&lt;span class="cl">&lt;span class="n">codeRunnable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">runnable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Runnable&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Override&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">run&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Running in runnable&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>重构后使用Lambda表达式&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-JAVA" data-lang="JAVA">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Runnable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">runnable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Running in runnable&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="用方法引用重构lambda表达式">&lt;strong>用方法引用重构Lambda表达式&lt;/strong>&lt;/h3>
&lt;p>&lt;strong>原Lambda表达式代码&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">Consumer&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nx">printer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">s&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nx">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>重构后使用方法引用&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Consumer&amp;lt;String&amp;gt; printer = System.out::println;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="用stream-api重构命令式的数据处理">用Stream API重构命令式的数据处理&lt;/h3>
&lt;p>&lt;strong>命令式编程风格（原代码）&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">codeList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">filtered&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">strings&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">startsWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;J&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">filtered&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>重构后使用Stream API&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">javaCopy&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">codeList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">filtered&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">strings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">stream&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">startsWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;J&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">collect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Collectors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">toList&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="使用lambda表达式改进代码封装性和可读性">使用Lambda表达式改进代码封装性和可读性&lt;/h3>
&lt;p>如果你发现需要频繁地从客户端代码查询对象状态，仅为了调用该对象的一个方法，可以通过接收Lambda或方法引用作为参数的方式来改进。&lt;/p>
&lt;p>&lt;strong>重构前的代码&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">javaCopy&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">codeif&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">logger&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">isEnabled&lt;/span>&lt;span class="p">())&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">logger&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Message with &amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">parameter&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>改进后的代码&lt;/strong>&lt;/p>
&lt;p>定义一个新的日志方法，接受一个&lt;code>Supplier&amp;lt;String&amp;gt;&lt;/code>类型的Lambda表达式作为参数，这样可以延迟消息构建的过程，只有在日志器启用的情况下才进行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 在Logger类中添加&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">logWithCondition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Supplier&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">messageSupplier&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">isEnabled&lt;/span>&lt;span class="p">())&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">messageSupplier&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后客户端代码可以这样调用：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">javaCopy code
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">logger.logWithCondition(() -&amp;gt; &amp;#34;Message with &amp;#34; + parameter);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样，客户端代码就不需要直接查询日志器的状态了。通过将参数构建（或者说是计算）延迟到确实需要日志消息的时刻，提高了代码的封装性和可读性，同时也避免了在日志器未启用时不必要的字符串拼接操作。&lt;/p>
&lt;h2 id="重构调试测试">重构|调试|测试&lt;/h2>
&lt;h3 id="延迟执行和环绕执行">延迟执行和环绕执行&lt;/h3>
&lt;p>&lt;strong>延迟执行（Lazy Execution）&lt;/strong>
延迟执行是编程中的一种策略，其中计算或代码执行被推迟到其结果实际需要的那一刻。这种策略在处理大量数据或进行资源密集型操作时特别有用，因为它可以提高应用程序的效率和响应能力。在Java中，延迟执行常常与流（Streams）、延迟加载和懒惰初始化等概念相关联。&lt;/p>
&lt;p>&lt;strong>环绕执行（Around Execution）&lt;/strong>
环绕执行是一种编程模式，通常用于资源管理、监控、日志记录或安全控制等场景。这种模式允许开发者在方法执行前后执行一些预处理和后处理代码，而不需要修改原有方法的代码。在Java中，环绕执行经常通过使用代理（Proxy）、装饰器模式或AOP（面向切面编程）框架如Spring AOP来实现。&lt;/p>
&lt;h3 id="lambda-与-设计模式">Lambda 与 设计模式&lt;/h3>
&lt;ul>
&lt;li>策略模式&lt;/li>
&lt;li>模版方法&lt;/li>
&lt;li>观察者模式&lt;/li>
&lt;li>责任链模式&lt;/li>
&lt;li>工厂模式&lt;/li>
&lt;/ul>
&lt;h3 id="peek">peek&lt;/h3>
&lt;p>&lt;code>peek&lt;/code> 是 &lt;code>Stream&lt;/code> API 中的一个中间操作，它允许你在不改变流中元素的情况下，对每个元素执行操作，主要用于调试目的，因为它允许查看流中的元素而不会干扰后续的操作。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Stream&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">peek&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Consumer&lt;/span>&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">super&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">action&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="默认方法">默认方法&lt;/h2>
&lt;blockquote>
&lt;p>目的: 它让类可以自动地继承接口的一个默认实现,它让类库的设计者放心地改进应用程序接口，无需担忧对遗留代码的影响。&lt;/p>
&lt;/blockquote>
&lt;h3 id="三种兼容性">&lt;strong>三种兼容性&lt;/strong>&lt;/h3>
&lt;p>&lt;strong>二进制级的兼容（Binary Compatibility）&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>定义&lt;/strong>：如果一个应用程序在升级了使用的库或组件之后，&lt;strong>不需要重新编译&lt;/strong>，仍然可以正常运行，那么这个库或组件的新版本就被认为是与旧版本在二进制级别上兼容的。&lt;/li>
&lt;li>&lt;strong>关键点&lt;/strong>：这种兼容性确保了编译后的程序代码（二进制代码）在库或组件更新后仍可运行，无需任何修改。这通常涉及到API中函数的签名、数据类型的布局和大小、以及类成员的顺序和可访问性等方面。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>源代码级的兼容（Source Compatibility）&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>定义&lt;/strong>：如果在库或组件更新后，应用程序的&lt;strong>源代码不需要修改就能重新编译&lt;/strong>并正常运行，那么这个更新被认为是源代码级别上兼容的。&lt;/li>
&lt;li>&lt;strong>关键点&lt;/strong>：这种兼容性强调源代码在经历库或组件的版本升级后仍旧可以不经修改直接编译通过。它关注于API的使用方式，包括函数、类的命名，参数的类型和数量，返回值类型等。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>函数行为的兼容（Functional Behavior Compatibility）&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>定义&lt;/strong>：如果库或组件的功能更新后，其公开的函数或方法的行为（包括副作用、执行结果和性能特征）保持不变，那么这个更新被认为保持了函数行为的兼容。&lt;/li>
&lt;li>&lt;strong>关键点&lt;/strong>：这种兼容性确保了即使库或组件的内部实现发生变化，对外提供的功能和预期的行为没有改变。对于使用该库或组件的开发者来说，他们可以预期即便更新了依赖，其应用程序的功能表现不会受到影响。&lt;/li>
&lt;/ul>
&lt;h3 id="默认方法的使用模式">默认方法的使用模式&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>可选方法&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>放置一个空的实现，减少无效的模版代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">interface&lt;/span> &lt;span class="nc">Iterator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">boolean&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">hasNext&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">next&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">default&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">remove&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">throw&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">UnsupportedOperationException&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>&lt;strong>行为的多继承&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>默认方法提供了一种多重继承的行为实现机制。类可以从多个接口继承默认方法的实现，解决了之前Java中的多重继承限制。在遇到多个接口定义相同默认方法的情况下，实现类必须覆盖该方法，以解决冲突。&lt;/p>
&lt;h3 id="方法解决冲突">方法解决冲突&lt;/h3>
&lt;ol>
&lt;li>类中的方法优先级最高。类或父类中声明的方法的优先级高于任何声明为默认方法的优先级。&lt;/li>
&lt;li>如果无法依据第一条进行判断，那么子接口的优先级更高：函数签名相同时，优先选择拥有最具体实现的默认方法的接口，即如果B继承了A，那么B就比A更加具体。&lt;/li>
&lt;li>最后，如果还是无法判断，继承了多个接口的类必须通过显式覆盖和调用期望的方法。&lt;/li>
&lt;/ol>
&lt;h2 id="completablefuture">CompletableFuture&lt;/h2>
&lt;p>CompletableFuture 提供了丰富的方法来处理异步编程的需求。以下是一些最常用的方法：&lt;/p>
&lt;h3 id="创建方法">创建方法&lt;/h3>
&lt;ul>
&lt;li>&lt;code>static &amp;lt;U&amp;gt; CompletableFuture&amp;lt;U&amp;gt; supplyAsync(Supplier&amp;lt;U&amp;gt; supplier)&lt;/code>
&lt;ul>
&lt;li>异步地执行一个 Supplier 供给型函数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>static &amp;lt;U&amp;gt; CompletableFuture&amp;lt;U&amp;gt; supplyAsync(Supplier&amp;lt;U&amp;gt; supplier, Executor executor)&lt;/code>
&lt;ul>
&lt;li>在指定的 Executor 中异步地执行一个 Supplier 函数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="转换和处理结果的方法">转换和处理结果的方法&lt;/h3>
&lt;ul>
&lt;li>&lt;code>&amp;lt;U&amp;gt; CompletableFuture&amp;lt;U&amp;gt; thenApply(Function&amp;lt;? super T,? extends U&amp;gt; fn)&lt;/code>
&lt;ul>
&lt;li>当 CompletableFuture 完成时，将结果传递给提供的函数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>&amp;lt;U&amp;gt; CompletableFuture&amp;lt;U&amp;gt; thenApplyAsync(Function&amp;lt;? super T,? extends U&amp;gt; fn)&lt;/code>
&lt;ul>
&lt;li>异步地应用一个函数到 CompletableFuture 的结果上。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>&amp;lt;U&amp;gt; CompletableFuture&amp;lt;U&amp;gt; thenApplyAsync(Function&amp;lt;? super T,? extends U&amp;gt; fn, Executor executor)&lt;/code>
&lt;ul>
&lt;li>在指定的 Executor 中异步地应用一个函数到 CompletableFuture 的结果上。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="消费结果的方法">消费结果的方法&lt;/h3>
&lt;ul>
&lt;li>&lt;code>CompletableFuture&amp;lt;Void&amp;gt; thenAccept(Consumer&amp;lt;? super T&amp;gt; action)&lt;/code>
&lt;ul>
&lt;li>当 CompletableFuture 完成时，给定的动作会被执行，消费 CompletableFuture 的结果。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>CompletableFuture&amp;lt;Void&amp;gt; thenAcceptAsync(Consumer&amp;lt;? super T&amp;gt; action)&lt;/code>
&lt;ul>
&lt;li>异步地消费 CompletableFuture 的结果。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>CompletableFuture&amp;lt;Void&amp;gt; thenAcceptAsync(Consumer&amp;lt;? super T&amp;gt; action, Executor executor)&lt;/code>
&lt;ul>
&lt;li>在指定的 Executor 中异步地消费 CompletableFuture 的结果。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="组合-completablefuture-的方法">组合 CompletableFuture 的方法&lt;/h3>
&lt;ul>
&lt;li>&lt;code>&amp;lt;U,V&amp;gt; CompletableFuture&amp;lt;V&amp;gt; thenCombine(CompletionStage&amp;lt;? extends U&amp;gt; other, BiFunction&amp;lt;? super T,? super U,? extends V&amp;gt; fn)&lt;/code>
&lt;ul>
&lt;li>当两个 CompletionStage 都正常完成时，将它们的结果传递给提供的函数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>&amp;lt;U,V&amp;gt; CompletableFuture&amp;lt;V&amp;gt; thenCombineAsync(CompletionStage&amp;lt;? extends U&amp;gt; other, BiFunction&amp;lt;? super T,? super U,? extends V&amp;gt; fn)&lt;/code>
&lt;ul>
&lt;li>异步地组合两个 CompletionStage 的结果，并应用函数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>&amp;lt;U,V&amp;gt; CompletableFuture&amp;lt;V&amp;gt; thenCombineAsync(CompletionStage&amp;lt;? extends U&amp;gt; other, BiFunction&amp;lt;? super T,? super U,? extends V&amp;gt; fn, Executor executor)&lt;/code>
&lt;ul>
&lt;li>在指定的 Executor 中异步地组合两个 CompletionStage 的结果，并应用函数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="异常处理的方法">异常处理的方法&lt;/h3>
&lt;ul>
&lt;li>&lt;code>CompletableFuture&amp;lt;T&amp;gt; exceptionally(Function&amp;lt;Throwable, ? extends T&amp;gt; fn)&lt;/code>
&lt;ul>
&lt;li>当 CompletableFuture 完成异常时，提供的函数将被调用，可以返回替代的结果。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>&amp;lt;U&amp;gt; CompletableFuture&amp;lt;U&amp;gt; handle(BiFunction&amp;lt;? super T, Throwable, ? extends U&amp;gt; fn)&lt;/code>
&lt;ul>
&lt;li>当 CompletableFuture 完成时（无论正常还是异常），提供的函数都会被调用，并允许返回结果或抛出异常。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>&amp;lt;U&amp;gt; CompletableFuture&amp;lt;U&amp;gt; handleAsync(BiFunction&amp;lt;? super T, Throwable, ? extends U&amp;gt; fn)&lt;/code>
&lt;ul>
&lt;li>异步地处理 CompletableFuture 的完成（无论正常还是异常）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>&amp;lt;U&amp;gt; CompletableFuture&amp;lt;U&amp;gt; handleAsync(BiFunction&amp;lt;? super T, Throwable, ? extends U&amp;gt; fn, Executor executor)&lt;/code>
&lt;ul>
&lt;li>在指定的 Executor 中异步地处理 CompletableFuture 的完成（无论正常还是异常）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>并行——使用流还是CompletableFutures？&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>如果你进行的是计算密集型的操作，并且没有I/O，那么推荐使用Stream接口，因为实现简单，同时效率也可能是最高的（如果所有的线程都是计算密集型的，那就没有必要创建比处理器核数更多的线程）。&lt;/li>
&lt;li>反之，如果你并行的工作单元还涉及等待I/O的操作（包括网络连接等待），那么使用CompletableFuture灵活性更好，你可以像前文讨论的那样，依据等待/计算，或者W/C的比率设定需要使用的线程数。这种情况不使用并行流的另一个原因是，处理流的流水线中如果发生I/O等待，流的延迟特性会让我们很难判断到底什么时候触发了等待。****&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="新的日期和时间api">新的日期和时间API&lt;/h2>
&lt;h3 id="localdate">LocalDate&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>内容&lt;/strong>：表示不带时间的日期，例如 &lt;code>2023-03-30&lt;/code>。&lt;/li>
&lt;li>常用API
&lt;ul>
&lt;li>&lt;code>now()&lt;/code>：获取当前日期。&lt;/li>
&lt;li>&lt;code>of(year, month, day)&lt;/code>：创建一个指定年月日的日期。&lt;/li>
&lt;li>&lt;code>plusDays(long daysToAdd)&lt;/code>、&lt;code>minusDays(long daysToSubtract)&lt;/code>：日期加减操作。&lt;/li>
&lt;li>&lt;code>getDayOfWeek()&lt;/code>、&lt;code>getMonth()&lt;/code>、&lt;code>getYear()&lt;/code>：获取日期的各个部分。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="localtime">LocalTime&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>内容&lt;/strong>：表示不带日期的时间，例如 &lt;code>10:15:30&lt;/code>。&lt;/li>
&lt;li>常用API
&lt;ul>
&lt;li>&lt;code>now()&lt;/code>：获取当前时间。&lt;/li>
&lt;li>&lt;code>of(hour, minute, second)&lt;/code>：创建一个指定时分秒的时间。&lt;/li>
&lt;li>&lt;code>plusHours(long hoursToAdd)&lt;/code>、&lt;code>minusHours(long hoursToSubtract)&lt;/code>：时间加减操作。&lt;/li>
&lt;li>&lt;code>getHour()&lt;/code>、&lt;code>getMinute()&lt;/code>、&lt;code>getSecond()&lt;/code>：获取时间的各个部分。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="instant">Instant&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>内容&lt;/strong>：表示时间线上的一个瞬时点，它是以 Unix 时间戳的形式来存储的。&lt;/li>
&lt;li>常用API
&lt;ul>
&lt;li>&lt;code>now()&lt;/code>：获取当前的瞬时点。&lt;/li>
&lt;li>&lt;code>ofEpochMilli(long epochMilli)&lt;/code>：根据 Unix 时间戳创建 Instant 实例。&lt;/li>
&lt;li>&lt;code>plusMillis(long millisToAdd)&lt;/code>、&lt;code>minusMillis(long millisToSubtract)&lt;/code>：瞬时点的加减操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="duration">Duration&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>内容&lt;/strong>：表示两个时刻之间的时间量，以秒和纳秒为单位。&lt;/li>
&lt;li>常用API
&lt;ul>
&lt;li>&lt;code>between(Temporal startInclusive, Temporal endExclusive)&lt;/code>：计算两个时间点之间的 Duration。&lt;/li>
&lt;li>&lt;code>ofDays(long days)&lt;/code>、&lt;code>ofHours(long hours)&lt;/code>、&lt;code>ofMinutes(long minutes)&lt;/code>：创建指定时间长度的 Duration。&lt;/li>
&lt;li>&lt;code>plus(Duration duration)&lt;/code>、&lt;code>minus(Duration duration)&lt;/code>：Duration 的加减操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="period">Period&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>内容&lt;/strong>：表示两个日期之间的年月日的时间量。&lt;/li>
&lt;li>常用API
&lt;ul>
&lt;li>&lt;code>between(LocalDate startDateInclusive, LocalDate endDateExclusive)&lt;/code>：计算两个日期之间的 Period。&lt;/li>
&lt;li>&lt;code>ofYears(int years)&lt;/code>、&lt;code>ofMonths(int months)&lt;/code>、&lt;code>ofDays(int days)&lt;/code>：创建指定时间长度的 Period。&lt;/li>
&lt;li>&lt;code>plus(Period period)&lt;/code>、&lt;code>minus(Period period)&lt;/code>：Period 的加减操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="附录">附录&lt;/h1>
&lt;h2 id="常用的函数式接口">常用的函数式接口&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>接口名&lt;/th>
&lt;th>方法签名&lt;/th>
&lt;th>用途&lt;/th>
&lt;th>其他方法&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>Consumer&amp;lt;T&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>void accept(T t)&lt;/code>&lt;/td>
&lt;td>接受单个输入参数并且不返回结果的操作（消费者）。&lt;/td>
&lt;td>N/A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Supplier&amp;lt;T&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>T get()&lt;/code>&lt;/td>
&lt;td>无需输入参数，返回一个结果。&lt;/td>
&lt;td>N/A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Function&amp;lt;T, R&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>R apply(T t)&lt;/code>&lt;/td>
&lt;td>接受一个输入参数，返回一个结果。&lt;/td>
&lt;td>&lt;code>default &amp;lt;V&amp;gt; Function&amp;lt;V, R&amp;gt; compose(Function&amp;lt;? super V, ? extends T&amp;gt; before)&lt;/code>&lt;br>&lt;code>default &amp;lt;V&amp;gt; Function&amp;lt;T, V&amp;gt; andThen(Function&amp;lt;? super R, ? extends V&amp;gt; after)&lt;/code>&lt;br>&lt;code>static &amp;lt;T&amp;gt; Function&amp;lt;T, T&amp;gt; identity()&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Predicate&amp;lt;T&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>boolean test(T t)&lt;/code>&lt;/td>
&lt;td>确定类型为T的对象是否满足某约束，并返回boolean值。&lt;/td>
&lt;td>&lt;code>default Predicate&amp;lt;T&amp;gt; and(Predicate&amp;lt;? super T&amp;gt; other)&lt;/code>&lt;br>&lt;code>default Predicate&amp;lt;T&amp;gt; negate()&lt;/code>&lt;br>&lt;code>default Predicate&amp;lt;T&amp;gt; or(Predicate&amp;lt;? super T&amp;gt; other)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>BiConsumer&amp;lt;T,U&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>void accept(T t, U u)&lt;/code>&lt;/td>
&lt;td>接受两个输入参数的操作，并且不返回任何结果。&lt;/td>
&lt;td>N/A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>BiFunction&amp;lt;T,U,R&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>R apply(T t, U u)&lt;/code>&lt;/td>
&lt;td>接受两个输入参数的函数，并且返回一个结果。&lt;/td>
&lt;td>N/A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>UnaryOperator&amp;lt;T&amp;gt;&lt;/code>&lt;/td>
&lt;td>继承自Function&lt;/td>
&lt;td>一种特殊的Function，输入参数类型和返回类型相同。&lt;/td>
&lt;td>&lt;code>static &amp;lt;T&amp;gt; UnaryOperator&amp;lt;T&amp;gt; identity()&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>BinaryOperator&amp;lt;T&amp;gt;&lt;/code>&lt;/td>
&lt;td>继承自BiFunction&lt;/td>
&lt;td>一种特殊的BiFunction，两个输入参数和返回类型相同。&lt;/td>
&lt;td>N/A&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="optional-类主要方法">Optional 类主要方法&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>方法名&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>empty()&lt;/code>&lt;/td>
&lt;td>创建一个空的 &lt;code>Optional&lt;/code> 实例。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>of(T value)&lt;/code>&lt;/td>
&lt;td>创建一个包含非空值的 &lt;code>Optional&lt;/code> 实例。如果 &lt;code>value&lt;/code> 为 &lt;code>null&lt;/code>，则抛出 &lt;code>NullPointerException&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ofNullable(T value)&lt;/code>&lt;/td>
&lt;td>创建一个 &lt;code>Optional&lt;/code> 实例，如果指定的值为 &lt;code>null&lt;/code>，则返回一个空的 &lt;code>Optional&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>isPresent()&lt;/code>&lt;/td>
&lt;td>如果值存在且非空，则返回 &lt;code>true&lt;/code>；否则返回 &lt;code>false&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>isEmpty()&lt;/code>&lt;/td>
&lt;td>Java 11 中引入，如果值不存在或为空，则返回 &lt;code>true&lt;/code>；否则返回 &lt;code>false&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>get()&lt;/code>&lt;/td>
&lt;td>如果值存在，则返回该值；否则抛出 &lt;code>NoSuchElementException&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ifPresent(Consumer&amp;lt;? super T&amp;gt; action)&lt;/code>&lt;/td>
&lt;td>如果值存在，执行给定的操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ifPresentOrElse(Consumer&amp;lt;? super T&amp;gt; action, Runnable emptyAction)&lt;/code>&lt;/td>
&lt;td>Java 9 中引入，如果值存在，执行给定的操作；否则执行另一个操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>orElse(T other)&lt;/code>&lt;/td>
&lt;td>如果有值则返回该值，否则返回一个默认值。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>orElseGet(Supplier&amp;lt;? extends T&amp;gt; other)&lt;/code>&lt;/td>
&lt;td>如果有值则返回该值，否则返回一个由 &lt;code>Supplier&lt;/code> 接口生成的值。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>orElseThrow()&lt;/code>&lt;/td>
&lt;td>如果有值则返回该值，否则抛出 &lt;code>NoSuchElementException&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>orElseThrow(Supplier&amp;lt;? extends X&amp;gt; exceptionSupplier)&lt;/code>&lt;/td>
&lt;td>如果有值则返回该值，否则抛出由提供的 &lt;code>Supplier&lt;/code> 接口生成的异常。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>filter(Predicate&amp;lt;? super T&amp;gt; predicate)&lt;/code>&lt;/td>
&lt;td>如果有值且满足给定的条件，则返回包含该值的 &lt;code>Optional&lt;/code>；否则返回一个空的 &lt;code>Optional&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>map(Function&amp;lt;? super T,? extends U&amp;gt; mapper)&lt;/code>&lt;/td>
&lt;td>如果有值，则对该值执行给定的映射函数，并返回一个 &lt;code>Optional&lt;/code> 类型的结果。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>flatMap(Function&amp;lt;? super T, ? extends Optional&amp;lt;? extends U&amp;gt;&amp;gt; mapper)&lt;/code>&lt;/td>
&lt;td>如果有值，则将提供的 &lt;code>Optional&lt;/code> 映射函数应用于该值，否则返回一个空的 &lt;code>Optional&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>stream()&lt;/code>&lt;/td>
&lt;td>Java 9 中引入，如果有值则返回仅包含该值的顺序 &lt;code>Stream&lt;/code>，否则返回一个空的 &lt;code>Stream&lt;/code>。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="pecs原则">PECS原则&lt;/h2>
&lt;p>一个好的经验法则是所谓的PECS原则（&amp;ldquo;Producer Extends, Consumer Super&amp;rdquo;），由Joshua Bloch提出：&lt;/p>
&lt;ul>
&lt;li>如果你需要一个&lt;strong>提供者（Producer）&lt;/strong>，即希望从泛型数据类型中读取数据，使用&lt;code>extends&lt;/code>。&lt;/li>
&lt;li>如果你需要一个&lt;strong>消费者（Consumer）&lt;/strong>，即希望写入数据到泛型数据类型中，使用&lt;code>super&lt;/code>。&lt;/li>
&lt;/ul></description></item></channel></rss>